
# dotnet 

	- Criar um app Console com dotnet, n terminal, digitar:

	dotnet new console --framework net6.0
	
	- 


# Atalho teclado

F5               Executa com debug
Ctrl F5        Executa sem debug
Ctrl N         Novo arquivo
Ctrl B         Remover ou mostras a barra lateral
Ctrl H  	     Substituir texto
Ctrl Alt N   Substitui todas as ocorencias de uma vez quando aberta a substituição de texto
Ctrl ;         Comenta e descomenta o texto selecionado
Ctrl PageUp    Próxima tab da direita
Ctrl PageDown  Próxima tab da esquerda'
Ctrl G         Vai para linha/coluna específica
Ctrl +           Aumenta a fonte do código
Ctrl -           Diminui a fonte do código
Shift Alt + ↓  Duplica linha
Alt ↓          Troca linahde lugar

cw + Tab  System.Console.WriteLine()



# Variáveis e tipos

Nomeclatura: 

	a-z, A-Z, 0-9
	Sem caracteres especiais
	Pode conter underline
	Não pode ser palavra reservada

	int segundaGerraMundial = 1942;
	float velocidadeF1 = 294.48f; (4 bytes de tamanho)
	double variavelFloat float = 15.6; (8 bytes de tamanho)
	decimal variavelFloat float = 15.6;
	bool variavelBool = true;
	string corFavorita = "Azul";
	char variavelChar = 'a'

Forma sem especificar tipo:

	var corFavorita = "Azul"
	var velocidadeF1 = 294.48f;

Forma não tipada, pouco usada, menos performatica:

	dynamic corFavorita = "Azul"
	corFavorita = 123456

# Constantes

	const int PI = 3.1456789f;
	

# Operadores lógicos e aritiméticos

=  Atribuição
== Igualdade
!= Diferente
&& E/And
|| Ou/Or
>  Maior que
<  Menor que
>= Maior ou igual
<= Menor ou igual
+  Soma
-  Subtração
*  Multiplicação
/  Divisão (Cuidado pois pode considerar apenas a parte inteira caso ambos numero da divisão sejam inteiros)
%  Resto da divisão
++ Incrementa 1
-- Decrementa 1
+= Adicão do valor a direita na variável da esquerda
-= Subtração do valor a direita na variável da esquerda
*= Multiplicação da variável a esquerda pelo valor a direita
/= Divisão da variável a esquerda pelo valor a direita
%/ Módulo da variável a esquerda pelo valor a direita


# Conversão implícita e Casting

	- Implícito: Quando é perfeitamente possível atribuir um tipo ao outro sem perda. Ex: Atribuir uma variável float para uma double;
	- Explícito: Precisa ser feita pelo programador de forma ativa. Ex: Atribuir uma variável double = 5.1 a uma do tipo int, ocorrendo neste caso uma perda de informação.
	- b = (int)a;


# Comentários 

// Linha única
/*
	Multiplas
	Linhas
*/

# Funções

static (Não precisa de instância)
void (Não tem nenhum tipo de retorno, é o que diferencia uma (function de uma procedure como no Delphi))

Ex: 
	// Estática e sem retorno
	static void exibirMsg()
    {
		Console.WiriteLine("Estamos usando funções");
	}
	
	// Estática e com parâmetro
  	static void GerarPreco(float Custo, float Margem)
    {
  		Console.WriteLine("O valor do Produto é " + (Custo + (Custo * (Margem / 100))));
  	}
	
	// Estática e com retorno do tipo string
	static float Somar(int a, int b, int c)
	{
		return a + b + c;
	}
	
# Arrays

	- Definido pelo tipo de dado, seguido pelo colchetes

	string[] produtos = new string[5] {
		"Sea of thieves",
		"FIFA",
		"Minecraft",
		"Half-Life",
		"Portal",
	};
	
	- Declaração simples 

	int[] valores = {40, 50, 60, 70, 20};

	- Acessar o array
	
	Console.WriteLine(valores[0]);
	
	- Alterar valor no array
	
	valores[0] = 99;
	

# Switch	

	- Forma melhor do que usar if com vários elses
	- Comparador case apenas para igualdade
	
	string cor = "Azul";
	
	switch(cor){
		
		case "Vermelho":
			Console.WriteLine("Sua cor favorita é vermelho!");
			break;
			
		case "Amarelo":
			Console.WriteLine("Sua cor favorita é Amarelo!");
			break;

		case "Azul":
			Console.WriteLine("Sua cor favorita é Azul!");
			break;
		
		default:
			Console.WriteLine("Sua cor favorita não está na lista!");
				break;
		
	}


# Enums

	- Tipos enumerador
	- Pode ser definido valores numéricos personalizados ou usar a sequência padrão
	- Pode fazer cast do enumerado para número e vice versa
	
	enum Cor {Azul, Verde, Amarelo, Vermelho }
	
	Cor corFavorita = Cor.Azul;
	Cor corFavoritaSua = Cor.Vermelho;
	
	Console.WriteLine(corFavorita);
	Console.WriteLine(corFavoritaSua);
	
	Console.WriteLine((int)corFavorita); -> 2
	Console.WriteLine((Cor)2); -> Amarelo
	
	Exemplo de menu
	
	enum Opcao {Criar= 1, Editar, Deletar, Listar, Atualizar}
	
        static void exibirMenu()
        {
	
        	Console.WriteLine("Selecione uma das opções abaixo:");
	        Console.WriteLine("1-Criar\n2-Deletar\n3-Editar\n4-Listar\n5-Atualizar");
        	int index = int.Parse(Console.ReadLine());
        	Opcao opcaoSelecionada = (Opcao)index;

        	switch (opcaoSelecionada)
	        {
		        case Opcao.Criar:
        			Console.WriteLine("Criando a opção selecionada");
        			break;
			
        		case Opcao.Editar:
    			    Console.WriteLine("Editando a opção selecionada");
    			    break;

        		case Opcao.Deletar:
			        Console.WriteLine("Deletando a opção selecionada");
    			    break;

        		case Opcao.Listar:
			        Console.WriteLine("Listando a opção selecionada");
    			    break;

        		case Opcao.Atualizar:
			        Console.WriteLine("Atualizando a opção selecionada");
    			    break;
	    
                default:
            		Console.WriteLine("Opcao não encontrada.");
                    break;
	        }	

            Console.ReadLine();
        }		
			
	
# Estruturas de repetição


	- Principas tipos: 
	
	While - Semelhante ao if, porém executa repetidamente o código enquanto a condição for verdadeira.
	Do While - Semelhante ao While, porém executa o código ao menos a primeira fez, mesmo a condição sedo false de cara.
	Foreach - Usado para percorrer arrays.
	For - A mais usada, também trabalha com arrays, pode executar de forma decrecente
			

    static void estruturaWhile()
    {
        int contador = 0;

        while (contador < 10)
        {
             Console.WriteLine("Executando o while.");
            contador++;
        }

        Console.ReadLine();
    } 


    static void estruturaDoWhile()
    {
        int contador = 0;

        do
        {
            Console.WriteLine("Executando do while");
            contador++;
        } while(contador < 20);

        Console.ReadLine();            
    }
	

    static void estruturaForEach()
    {
        string[] palavras = {"Victor", "Lima", "Guia do Programador", "Formação", "Node", "Curso"};

        foreach(string palavra in palavras)
        {
            Console.WriteLine("Palavra da vez " + palavra);
        }
            
        Console.ReadLine();                        
    }
	
    static void estruturaFor()
    {

        for (int contador = 0; contador < 0; contador++)
        {
            Console.WriteLine("Executando For");
        }
    }

    static void estruturaForComArray()
    {
        string[] palavras = {"Victor", "Lima", "Guia do Programador", "Formação", "Node", "Curso"};

        for (int contador = 0; contador <palavras.Length; contador++)
        {
            Console.WriteLine("Executando For na palavra: " + palavras[contador]);
        }

        Console.ReadLine();                        
    }

    static void estruturaForDecrecente()
    {
        for(int contador = 6; contador > 0; contador--)
        {
            Console.WriteLine("Executando for Descrecente: " + contador);                        
        }

        Console.ReadLine();                                    
    }
	
	
# Escopos

	- Variáveis podem ter escopo local e global;
	
	
# Classes

	+ Ordem sugerida de implementação de membros da Classe:
		- Atributos privados
		- Propriedades autoimplementadas
		- Construtores
		- Propriedades customizadas
		- Outros métodos de classe
	
	+ Construtor
		- Abaixo dos atributos
		- Pode ser sobrecarregado
		- Pode ser criado sem prametros para permitir o uso do construtor padrão
		ex: 
		
			public [mesmo_nome_da_classe](string nome, int idade)
		
		Sitaxe alternativa sem Constructor, passando entre chaves:
		
			Pessoa pessoa = new Pessoa{nome = "Carlos", idade = 36};	
	
	+ Atributos
		- Publico
			- Nomeclatura CamelCase
			
			ex: public string Nome;
			    
		- Privado (Encapsulamento)
			- Nomeclatura iniciando letra mincuscula
			
			ex: private string _nome;
		
		- Property
			- Definições a métodos encapsulados, porém expondo uma sintaxe similar à de atributos e não de métodos.
			- Nomeclatura CamelCase
			
			ex: public string Nome {
					get { return _nome; }
					set { 
						  
						  if (value != null && value.Length > 1)
						  {
						      _nome = value
						  }
					}
		
		- AutoProperty
			- Definir operação get e set direto na declaração do atributo.
			- Nomeclatura CamelCase
			- Atributos que contém validações precisam usar implementação Property
			
			ex: public string Nome { get; private set } (get permitido, set proibido.)
		
		
	+ Métodos
	
		- public string Apresentar()
		{
			System.Console.WriteLine("Olá, me chamo " + Nome + " e tenho " + Idade + " anos de idade.");
		}
		
	
	+ ToString()
		override + Tab para retornar a assinatura padrão do Object;
	
	+ This 
		Diferenciar atributos de variáveis locais(Java)
		Passar o próprio objeto como argumento na chamada de método ou constructor
	
	+ Encapsulamento
	

# Modificadores de acesso

	+ Para membros de classe

							Própria classe		SubClasses no		Classes do		Subclasses fora		Classes fora
												Assembly			Assembly		do Assembly			do Assembly
	
	public					X					X					X				X					X		
	
	protected internal		X					X					X				X
	
	internal				X					X					X
	
	protected				X					X									X
	
	private protected		X					X
	
	private 				X

	
	+ Classes também pode receber modificadores de acesso
	
		- Acesso por qualquer classe: public class Produto
		
		- Acesso somente dentro do assembly: internal class producto
		
		- Aceso somente pela classe-mãe: private class produto
		  Obs: Classe aninhada, por padrão é private.
		
		
		
# Tipos referÊncia e Valor

	- Tipo Referência: Classes
		- Grava uma referência na área de Stack, com um ponteiro para os campos da classe na área de Heap.
		- Usufrui de todos os recursos OO
		- Valor null, indica que aponte para ninguem, ou lugar nenhum na memória.
		- Uma atribuição x = y grava na variável o mesmo ponteiro para a área de Heap.
	
	- Tipo Valor: Struct
	    - São os tipos básicos, double, string, datetime
		- Mais simples e performático, não tem suporte OO, mas suporta interface
		- Grava o valor de fato na área de Stack
		- Uma atribuição x = y, cria uma cópia do valor de uma em outra
		- É possivel criar seu próprio struct, necessida inicializar ao menos o valores, entretando aceita o comando new;
			namespace Course 
			{
				struct Point 
				{
				
					public double X, Y;
					
					public overrride string ToString() 
					{
						return "(" + X + "," + Y + ")";
					}
				}	
			}		
	