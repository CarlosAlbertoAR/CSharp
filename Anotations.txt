### Configuração do Ambiente

1 - Instalar o VS Code
2 - Instalar o .NET SDK 5
3 - Instalar o Entity Framework
	> dotnet tool install dotnet-ef -g

4 - Extensões (Filtro = @installed)
	> C# ms-dotnettools.csharp
	> C# Extensions jchannon.csharpextensions | Extensões de facilitadores no botão direito
	> Bracket Pair Colorizer 2 coenraads.bracket-pair-colorizer-2 (Linhas ligando inicio e fim de bloco)
	> Material Icon Theme pkief.material-icon-theme (Pacote de ícones)
	> Path Intellisense christian-kohler.path-intellisense (Facilita na hora de refenciar, C# ou TypeScrupt)
	> NuGet Package Manager jmrog.vscode-nuget-package-manager

5 - Configurar a versão do dotnet a ser utilizada caso haja mais de uma
    > Criar um arquivo global.json e dentro dele especificar a versão.

### Atalhos de teclado da IDE

	> Ctrl + Shift + P - Abre opções em cima
		:[Número linha]:[Número Coluna] - Vai para a linha e coluna no código.

	> Ctrl + . - Opções para novas propriedades

	> Alt + Duplo Clique - Cria cursor adicional que será sincronizado aos comando de teclado

	> Selecionar e Ctrl + D - Cria cursor adicional que será sincronizado aos comando de teclado 
	
	> cw + tab escreve Console.WriteLine
        
	> F5 inicia debug
	> Shift F5 para debug
	> F10 proxima linha debug
 	> F11 entra na função/procedure

Selecionar + F12  > Entra no arquivo da classe correspondente

Debug

	> F5 - Inicia o debug
	> Shift F5 - Paralisa o Debug

### Terminal

### Comandos dotnet

	> dotnet --version - Versão corrente
	> dotnet --h (Help)
	> dotnet --list-sdks - Listas todas versões existentes
	

	> Novo Projeto baseado em Template:
	
		dotnet new [Type] -n[Name]
		dotnet new console -n GameTOP

	> Executar o projeto
	
		dotnet run
		
	> Executar automaticamente após salvar
	
		dotnet watch run

	> Importar Entity FrameWork para o Projeto
		
		dotnet add package Microsoft.EntityFrameworkCore  

		dotnet add package Microsoft.EntityFrameworkCore.tools 

		dotnet add package Microsoft.EntityFrameworkCore.SqlServer  
		dotnet add package Microsoft.EntityFrameworkCore.Sqlite  
		
	> Criar um Migration no projeto
		dotnet ef migrations add <Nome>	 --verbose

### Estrutura de arquivos

   > Arquico .sln : Projeto, solução
   > Arquivo .csproj : Configurações de de tipo, versão do framework do projeto
   > Classe principal .cs
   > Subpastas obj e bin
   
### Código
   > using
   > namespace > Agrupamento de classes relacionadas (Organização)   

### Classes
   > Nomeclatura
      > Nome em maiúscula
	  > Mesmo nome do arquivo para o nome da classe
	  > Membros: Métodos da classe
	  > Método Main (Ponto de Entrada): static void Main(string[] args)
	  

### ConsoleCore App

1 - Open directory
2 - dotnet new console -n Primeiro_Console
3 - dotnet run

###  Built in data types

	> Mais usados: 
		> int = System.Int32 
		> long = System.Int64
		> float = System.Single
		> double = System.Double
		> decimal = System.Decimal
		
	













Abaixo Curso Antigo

### ConsoleCore App

1 - Open directory
2 - dotnet new console -n GameTOP
3 - dotnet run

### ProAgil.WebAPI

1 - Criar usando 3 templates

dotnet new web -n ProAgil.Web > Não tem a pasta Models, nem Controllers, Site básico, cru
dotnet new mvc -n ProAgil.MVC > Tem a pasta Models, Vantajoso para se trabalhar com Razor, para angular não é indicado 
dotnet new webapi -n ProAgil.API > Tem a pasta Controllers, indicado para uso com Angular

2 - Properties/lauchSettings.json
	> "ASPNETCORE_ENVIRONMENT" : modo Development ou Production
	> "applicationUrl" : Configura a url, https ou não, porta
	> "launchBrowser" : Abre o browser automaticamente ou não
	
3 -	Controllers/WeatherForecastController.cs
	> Rotas Route("[controller]") Ex: localhost:5000/WeatherForecast para o Controller WeatherForecastController.cs
	> Route("api/[controller]") Ex: localhost:5000/site/WeatherForecast para o Controller WeatherForecastController.cs
	
4 - Startup.cs
	> É o midleware entre o Banco de dados e a aplicação Angular
	> Comentar o app.UseHttpsRedirection();, pois não será necessário no início.

5 - Postman
	> Aplicativo para debug e documentação de API Rest
	
6 - Criação do diretório "Model" na pasta raiz do projeto para armazenar modelos de classes

7 - Nova Classe Evento.cs
	> Atalho de digitação "prop" cria um esqueleto de propriedade.
	> Utilização da Classe nas rotas do controller WeatherForecastController.cs
	
8 - DataContext e EF Core
	> Criação do diretório "Data" na pasta raiz	do projeto.
	
	> Criação do arquivo DataContext.cs
	
	> using Microsoft.EntityFrameworkCore;
		
	> Criação de Classe DataContext
	
	> Criação de um DbSet para o modelo Evento.cs (/Model/Evento.cs
		> public DbSet<Evento> Eventos { get; set; }
	
	> No arquivo Startup.cs using em using Microsoft.EntityFrameworkCore e using ProAgil.API.Data 
	Na função ConfigureServices adicionar um AddDbContext
		>services.AddDbContext<DataContext>(
                x => x.UseSqlite(Configuration.GetConnectionString("DefaultConnection")
            ));
			
	> No arquivo appsettings.Development.json adicionado a string para conexão Sqlite
		> "ConnectionStrings": {
			"DefaultConnection": "Data Source=ProAgil.db"
		   
		   }
	> No terminal, criar um Migration no Entity Framework para o projeto:
		> dotnet ef migrations add init --verbose
		
		> Estando toda a configuração certa, a parta Migration será criada.
		
		> Na pasta Migration haverá um arquivos com o sufixo do nome informado no comando add, especificando os dados da Tabela no Banco de Dados.
		
	> No terminal, criando o Bano de dados a partir do migration gerado:
		> dornet ef database update
	
		> Banco de Dados sqlite criado no diretório do fonte
		
		> Criar campo ImageUrl na classe Evento.cs e em seguida comandar a criação do campo em banco de dados.
	
	> Adicionar novo campo em classe e refletir no ef
		> Abrir classe Eventos, adicionar a propriedade ImagemURL
		
		> dotnet ef migrations add 'ImagemURL'
		
		> dotnet ef database update
		
		> Campo criado no banco de dados Pro-Agil.db
		
9 - 		
		
		
		   
				

